// 배열의 처음이나 끝에서 요소 하나를 추가하거나 제거하기

// push와 pop 배열의 끝에 요소를 추가하거나 제거합니다.(자체 수정)
// unshift 와 shift 배열의 처음에 요소를 추가하거나 제거합니다.(자체 수정)

//example
const arr = ["b", "c", "d"];
arr.push("e"); // 4. arr은 이제 ["b", "c", "d", "e"] 입니다.
arr.pop(); // "e". arr은 이제 ["b", "c", "d"]입니다.
arr.unshift("a"); // 4. arr은 이제 ["a", "b", "c, "d"]입니다.
arr.shift(); // "a". arr은 이제 ["b". "c", "d"]입니다.

// 배열의 끝에 여러 요소 추가하기
// concat 매소드 --> 사본 반환
const arr1 = [1, 2, 3];
arr1.concat(4, 5, 6); // [1, 2, 3, 4, 5, 6] arr1은 바뀌지 않습니다.
arr1.concat([4, 5, 6]); // [1, 2, 3, 4, 5, 6] arr1은 바뀌지 않습니다.
arr1.concat([4, 5], 6); // [1, 2, 3, 4, 5, 6] arr1은 바뀌지 않습니다.
arr1.concat([4, [5, 6]]); // [1, 2, 3, 4, [5, 6]] arr1은 바뀌지 않습니다.
// concat는 제곻받은 배열을 한번만 분해합니다. 배열안의 배열을 다시 분해하지 않습니다.

// 배열 일부 가져오기
// slice 매소드 사용  ---> 사본 반환
const arr2 = [1, 2, 3, 4, 5];
arr2.slice(3); // [4, 5]. arr2는 바뀌지 않습니다.
arr2.slice(2, 4); // [3, 4].
arr2.slice(-2); // [4, 5].
arr2.slice(1, -2); // [2, 3].
arr2.slice(-2, -1); // [4].
// 첫번째 매개변수는 어디에서부터 가져올지, 두번째 매개변수는 어디까지 가져올지(바로 앞의 인덱스를 가져옵니다.)
// 음수는 배열의 끝부터 요소를 셉니다. -1부터!!!

// 임의의 위치에서 요소 추가하거나 제거하기
// splice 메소드 사용하기 ---> (자체 수정)
const arr3 = [1, 5, 7];
arr3.splice(1, 0, 2, 3, 4); // []. arr3은 이제 [1, 2, 3, 4, 5, 7] 입니다.
arr3.splice(5, 0, 6); // []. arr3은 이제 [1, 2, 3, 4, 5, 6, 7] 입니다.
arr3.splice(1, 2); // [2, 3]. arr3은 이제 [1, 4 ,5, 6, 7] 입니다.
arr3.splice(2, 1, "a", "b"); // [5]. arr3은 이제 [1, 4, "a", "b", 7] 입니다.
// 첫번째 매개변수는 수정시작할 인덱스, 두번째는 제거할 요소 숫자, 나머지 매개변수는 배열에 추가될 요소입니다.

// 배열 안에서 요소 교체하기
// copyWithin 사용하기
const arr4 = [1, 2, 3, 4];
arr4.copyWithin(1, 2); // arr4은 이제 [1, 3, 4, 4 ] 입니다.
arr4.copyWithin(2, 0, 2); // arr4은 이제 [1, 3, 1, 3 ] 입니다.
arr4.copyWithin(0, -3, -1); // arr4은 이제 [3, 1, 1, 3 ] 입니다.
// 배열 요소를 복사해서 다른 위치에 붙여놓고, 기존의 요소를 덮어씁니다.
// 첫번째 매개변수는 복사한 요소를 붙여놓을 위치이고, 두번째 매개변수는 복사를 시작할 위치, 세번째 매개변수는 복사를 끝낼 위히, slice와 마찬가지로 배열의 끝에서 셉니다.

// 특정 값으로 배열 채우기
// fill 매서드 이용 -----> es6
const arr5 = new Array(5).fill(1); // arr5은 [1, 1, 1, 1, 1] 로 초기화 됩니다.
arr5.fill("a"); // arr5은 이제 ["a", "a", "a", "a", "a"] 입니다.
arr5.fill("b", 1); // arr5은 이제 ["a", "b", "b", "b", "b"] 입니다.
arr5.fill("c", 2, 4); // arr5은 이제 ["a", "b", "c", "c", "b"] 입니다.
arr5.fill(5.5, -4); // arr5은 이제 ["a", 5.5, 5.5, 5.5, 5.5] 입니다.
arr5.fill(0, -3, -1); // arr5은 이제 ["a", 5.5, 0, 0, 5.5] 입니다.
// 이 메서드는 정해진 값으로 배열을 채웁니다.
// 크기를 지정해서 배열을 생성하는 Array 생성자와 잘 어울립니다.

// 배열 정렬과 역순 정렬
// reverse 사용하기 -------> (자체 수정)
const arr6 = [1, 2, 3, 4, 5];
arr6.reverse(); // arr은 이제 [5, 4, 3, 2, 1] 입니다.

// sort 사용학기
const arr7 = [5, 4, 3, 2, 1];
arr7.sort(); // arr은 이제 [1, 2, 3, 4, 5] 입니다.
// sort는 배열의 요소의 순서를 정렬합니다.
// 정렬 함수를 받을 수 있습니다. 예를 들어 일반적으로 객체가 들어 있는 배열을 정렬할 수 없지만, 정렬합수를 사용하면 가능합니다.
const arr8 = [
  { name: "Suzanne" },
  { name: "Jim" },
  { name: "Trevor" },
  { name: "Amanda" }
];
arr8.sort(); // arr은 바뀌지 않았습니다.
arr8.sort((a, b) => (a.name > b.name ? 1 : -1)); // arr의 new 프로퍼티의 알파벳 순으로 정렬된다.
arr8.sort((a, b) => (a.name[1] < b.name[1] ? 1 : -1)); // arr의 new 프로퍼티의 두 번째 글자의 알파벳 역순으로 정렬된다.
